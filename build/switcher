#! /bin/bash

# basic build system for editing. creds are kept above repo. 

# No flags gets us blank configs for repo

function blankem {
	echo "secrets blanked"
	cp $pathToSecrets/class.database_blank.php ../includes/class.database.php
	cp $pathToSecrets/AdminSettings_blank.php ../wiki/AdminSettings.php
	cp $pathToSecrets/LocalSettings_blank.php ../wiki/LocalSettings.php
	cp $pathToSecrets/wp-config_blank.php ../blog/wp-config.php
}

function timer {
	SECS=5
		while [[ 0 -ne $SECS ]]; do
    		echo "$SECS.."
    		sleep 1
    		SECS=$[$SECS-1]
		done
}

function exportSQL {
	echo "exportSQL selected"
	$MAMPDir/bin/start.sh
	open $MAMPDir/MAMP.app --args -AppCommandLineArg
	echo "We'll need an sql server to backup from - wait 5 secs for MAMP to startup"
	timer
	echo "Need your local MySQL password please:"
  	$mySQLDir/mysqldump -u root -p "$db" > "$sqlFolder/$db".sql && {
  		echo "Success - database saved to "$sqlFolder/$db".sql "
  		read -n1 -r -p "Press any key to continue..."
  		$MAMPDir/bin/stop.sh
  	}
}

if [[ "$1" = "--local" ]]; then
	echo "entering command line"
	cp $pathToSecrets/class.database_local.php ../includes/class.database.php
	cp $pathToSecrets/AdminSettings_local.php ../wiki/AdminSettings.php
	cp $pathToSecrets/LocalSettings_local.php ../wiki/LocalSettings.php
	cp $pathToSecrets/wp-config_local.php ../blog/wp-config.php
	$MAMPDir/bin/start.sh
	open $MAMPDir/MAMP.app --args -AppCommandLineArg
	echo "******************************************************"
	echo "SQL command: $mySQLDir/mysql -u root -p "$db" -e \"\""
	echo "SQL CMD: $mySQLDir/mysql -u root -p "$db" "
	echo "These might be handy too:"
	echo "delete from version/changes/news where version_id=xxx;"
	echo "alter table version/changes/news AUTO_INCREMENT = 21; (but do the above first)"
	echo "******************************************************"
	echo $warn
	exit

elif [[ "$1" = "--releaseFile" ]]; then
	folder="QuickPlay\ $version"
	echo "making the remote folder $folder and uploading $localZipFile to it"
  rsync -P -e ssh "$localZipFile" "$sfFileLogin:$sfFilePath/$folder/" || { echo "some problem occurred" && exit; }
  echo done
 # now we need to set this as the default download for all platforms
 # (if we don't we'll see it as default for osx but it won't be for windows)
 # we do that on sf's allura platform like so:
 # https://sourceforge.net/p/forge/community-docs/Using%20the%20Release%20API/
 apikey=$(cat "../../secrets/SourceForgeReleaseAPIKey.txt")
 { curl -H "Accept: application/json" -X PUT -d "default=windows&default=mac&default=linux&default=bsd&default=solaris&default=others" -d "api_key=$apikey" "$sfFileURL"; } || echo "can't set default download for all operating systems using sourceforge api"

elif [[ "$1" = "--versionInfo" ]]; then
	$MAMPDir/bin/start.sh
	open $MAMPDir/MAMP.app --args -AppCommandLineArg
	echo "We'll need an sql server to save to - wait 5 secs for MAMP to startup"
	timer
	(node ./updateChangelogAndVersion/updateQPVersion.js) || echo "maybe you need to install node"


elif [[ "$1" = "--changelog" ]]; then
	$MAMPDir/bin/start.sh
	open $MAMPDir/MAMP.app --args -AppCommandLineArg
	echo "We'll need an sql server to save to - wait 5 secs for MAMP to startup"
	timer
	(node ./updateChangelogAndVersion/updateChangelog.js) || echo "maybe you need to install node"	

elif [[ "$1" = "--exportSQL" ]]; then
	exportSQL

elif [[ "$1" = "--live" ]]; then
	echo "live selected"
	# first export the sql
	exportSQL
	echo "changing the config files to the live versions"
	cp $pathToSecrets/class.database.php ../includes/class.database.php
	cp $pathToSecrets/AdminSettings.php ../wiki/AdminSettings.php
	cp $pathToSecrets/LocalSettings.php ../wiki/LocalSettings.php
	cp $pathToSecrets/wp-config.php ../blog/wp-config.php
	echo "syncing the website"
	./site
	echo "next, syncing the databaes"
	./database
	exit

elif [[ "$1" = "--blankem" ]]; then
	echo "blanking and exiting"
	$MAMPDir/bin/stop.sh
	blankem
	exit

else
	echo "no flags"
	blankem	
fi

# always blank when we fall through
echo "shutting down and blanking"; 
blankem; 


