#! /bin/bash 

# basic build system for editing. creds are kept above repo. 

# No flags gets us blank configs for repo

function blankem {
	echo "secrets blanked"
	# the callsite here uses the values that have been included to pass the real connection values in
	replacePHPDBConfig "" "" "" "" "" ""
	#cp $pathToSecrets/class.database_blank.php ../includes/class.database.php
	#cp $pathToSecrets/AdminSettings_blank.php ../wiki/AdminSettings.php
	#cp $pathToSecrets/LocalSettings_blank.php ../wiki/LocalSettings.php
	#cp $pathToSecrets/wp-config_blank.php ../blog/wp-config.php
}

function timer {
	SECS=5
		while [[ 0 -ne $SECS ]]; do
    		echo "$SECS.."
    		sleep 1
    		SECS=$[$SECS-1]
		done
}

# 
function replacePHPConfig { #formal params $1=the config key (inlcuding $) $2=the value to replace between the '' $3=the file URI
echo "Making value for the key $1 be $2 in $3"
if [[  "x$1" = "x" ]]; then 
	echo "config key is empty"
	return 1
else
	# it could be this without actually using a variable
	# perl -p -i -e "s/\\\$wgDBadminuser[ ]*=[ ]*\'.*\';//" ../../secretsTest/atest
	# but seeing as we are, and seeing as we dont want to escape our \$key when we pass to this, we need to
	perl -p -i -e "s/(\\$1[ ]*=[ ]*[\'\"]*)[^\'\";]*([\'\"]*);/\1$2\2;/" $3
 # The basic thing is:
 # key[some space]=[some space][maybe a ' or "]value[maybe a ' or "];
 # but we must catch value as NOT including [maybe a ' or "]
 # and also we need to replace the [maybe a ' or "] with its equivalent, hence the capturing groups 
fi
}


function replacePHPConstant { #formal params $1=the config key (inlcuding $) $2=the value to replace between the '' $3=the file URI
echo "Making value for the key $1 be $2 in $3"
perl -p -i -e "s/(define\(\'$1\'[ ]*,[ ]*)(['\"]*)[^\'\"]*['\"]*\);/\1\2$2\2\);/" $3
}

function replacePHPDBConfig { #formal params $dbhost $dbport $dbusername $dbpassword $dbname $wgDBadminuser 
filesToReplace=()
#	"../includes/class.database.php"
#	"../wiki/AdminSettings.php"
#	"../wiki/LocalSettings.php"
#	"../blog/wp-config.php"
	#)

	valuesToReplace=()
#	$dbhost
# $dbport
#	$dbusername
#	$dbpassword
#	$dbname
#	$wgDBadminuser
#	)

	#double for loop to apply - lets just search+replace all terms in all files
	#for file in "${filesToReplace[@]}"; do; (
	#	for value in "${valuesToReplace[@]}"; do (
	#		replacePHPDBConfig "\$value" $1 "$file"
	#	)			
}

#	replace "\$this-\>dbhost \= \"\"; "	with  "\$this-\>dbhost \= \"$dbhost\"; "	 
#	replace	"\$this-\>dbport \= ; " with "\$this-\>dbport \= $dbport; "	
#	replace "\$this-\>dbusername \= \"\"; " with "\$this-\>dbusername \= \"$dbusername\"; "		
#	replace	"\$this-\>dbpassword \= \"\"; " with "\$this-\>dbpassword \= \"$dbpassword\"; "		
#	replace	"\$this-\>dbname \= \"\"; " with 	"\$this-\>dbname \= \"$dbname\"; "	

function exportSQL {
	echo "exportSQL selected"
	$MAMPDir/bin/start.sh
	open $MAMPDir/MAMP.app --args -AppCommandLineArg
	echo "We'll need an sql server to backup from - wait 5 secs for MAMP to startup"
	timer
  	$mySQLDir/mysqldump -u root -p"$localPass" "$db" > "$sqlFolder/$db".sql && {
  		echo "Success - database saved to "$sqlFolder/$db".sql "
  		read -n1 -r -p "Press any key to continue..."
  		$MAMPDir/bin/stop.sh
  	}
}

function createLoginShell {
		ssh $sflogin create
}

if [[ "$1" = "--local" ]]; then
	echo "entering command line"
	. $pathToSecrets/local.cfg
	# the callsite here uses the values that have been included to pass the real connection values in
	replacePHPDBConfig $dbhost $dbport $dbusername $dbpassword $dbname $wgDBadminuser 
	
	#cp $pathToSecrets/class.database_local.php ../includes/class.database.php
	#cp $pathToSecrets/AdminSettings_local.php ../wiki/AdminSettings.php
	#cp $pathToSecrets/LocalSettings_local.php ../wiki/LocalSettings.php
	#cp $pathToSecrets/wp-config_local.php ../blog/wp-config.php
	$MAMPDir/bin/start.sh
	open $MAMPDir/MAMP.app --args -AppCommandLineArg
	echo "******************************************************"
	echo "SQL command: $mySQLDir/mysql -u root -p "$db" -e \"\""
	echo "SQL CMD: $mySQLDir/mysql -u root -p "$db" "
	echo "These might be handy too:"
	echo "delete from version/changes/news where version_id=xxx;"
	echo "alter table version/changes/news AUTO_INCREMENT = 21; (but do the above first)"
	echo "******************************************************"
	echo $warn
	exit

elif [[ "$1" = "--releaseFile" ]]; then
	folder="QuickPlay\ $version"
	echo "making the remote folder $folder and uploading $localZipFile to it"
  rsync -P -e ssh "$localZipFile" "$sfFileLogin:$sfFilePath/$folder/" || { echo "some problem occurred" && exit; }
  echo done
 # now we need to set this as the default download for all platforms
 # (if we don't we'll see it as default for osx but it won't be for windows)
 # we do that on sf's allura platform like so:
 # https://sourceforge.net/p/forge/community-docs/Using%20the%20Release%20API/
 apikey=$(cat "../../secrets/SourceForgeReleaseAPIKey.txt")
 { curl -H "Accept: application/json" -X PUT -d "default=windows&default=mac&default=linux&default=bsd&default=solaris&default=others" -d "api_key=$apikey" "$sfFileURL"; } || echo "can't set default download for all operating systems using sourceforge api"

elif [[ "$1" = "--versionInfo" ]]; then
	$MAMPDir/bin/start.sh
	open $MAMPDir/MAMP.app --args -AppCommandLineArg
	echo "We'll need an sql server to save to - wait 5 secs for MAMP to startup"
	timer
	(node ./updateChangelogAndVersion/updateQPVersion.js) || echo "maybe you need to install node"


elif [[ "$1" = "--changelog" ]]; then
	$MAMPDir/bin/start.sh
	open $MAMPDir/MAMP.app --args -AppCommandLineArg
	echo "We'll need an sql server to save to - wait 5 secs for MAMP to startup"
	timer
	(node ./updateChangelogAndVersion/updateChangelog.js) || echo "maybe you need to install node"	

elif [[ "$1" = "--exportSQL" ]]; then
	exportSQL

elif [[ "$1" = "--live" ]]; then
	echo "live selected"
	# give me login shell
	createLoginShell
	# first export the sql
	exportSQL
	echo "changing the config files to the live versions"
	. $pathToSecrets/live.cfg
	# the callsite here uses the values that have been included to pass the real connection values in
	replacePHPDBConfig $dbhost $dbport $dbusername $dbpassword $dbname $wgDBadminuser 
	#cp $pathToSecrets/class.database.php ../includes/class.database.php
	#cp $pathToSecrets/AdminSettings.php ../wiki/AdminSettings.php
	#cp $pathToSecrets/LocalSettings.php ../wiki/LocalSettings.php
	#cp $pathToSecrets/wp-config.php ../blog/wp-config.php
	echo "syncing the website"
	./site
	echo "next, syncing the database"
	./database
	exit

elif [[ "$1" = "--SSHCmd" ]]; then
	echo "SSH Command Line Starting"
	createLoginShell
	./exp ssh $sflogin "$SSHEnvVars"

elif [[ "$1" = "--blankem" ]]; then
	echo "blanking and exiting"
	$MAMPDir/bin/stop.sh
	blankem
	exit

else
	echo "no flags"
	blankem	
fi

# always blank when we fall through
echo "shutting down and blanking" 
blankem 


