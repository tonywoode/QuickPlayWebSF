#! /bin/bash 

# Physically replaces values in php config files
function replacePHPConfig { #formal params $1=the config key (inlcuding $) $2=the value to replace between the '' $3=the file URI
	echo "Making value for the key $1 be $2 in $3"
	if [[  "x$1" = "x" ]]; then 
		echo "config key is empty"
		return 1
	else
		# replace any standard php vars
		
		#		*		double \\ before $1 is because $1 is "$variable". Dont want to escape our \$key when we pass to
		#		*		basically: key[some space]=[some space][maybe a ' or "]value[that ' or " we might have had];
		#		*		but we must define "value" as NOT including [maybe a ' or "]
		
		perl -p -i -e "s/(\\$1[ ]*=[ ]*)(['\"]*)[^'\";]*\2;/\1\2\E$2\2;/" "$3"
		
		#		*		using the \2 early ensures we dont end up with ''value as the replacement
		#		*		\E is interesting. Its supposed to escape a quotemeta group, but serves as a 
		#					way of stopping \2[0-9]{2} from being interpreted as an octal escape rather than a 
		#					backreference. \Q \E wasn't working as it was causing other special chars (-) to \ escape

	# replace any constants
		perl -p -i -e "s/(^define\(\'$1\'[ ]*,[ ]*)(['\"]*)[^\'\"]*\2\);/\1\2\E$2\2);/" "$3"
	fi
}

# uses PHP to scan a config key in a file for its value
function getAPHPConfigValue {
  fileToScan=$1
	keyToFind=$2
	result=$( { cat "$fileToScan" && echo "<?php echo "$keyToFind" ?>"; } | sed "s/this-\>//" | php )
	# sed takes out object context in php var names, else php refuses to parse the variable when not in object contexti
	# TODO: parse error on no value (like DBport = ;) gets transferred as filename
	echo $result
}

# sets the keys we want to globally change
function getConfigKeysToChange {
# TODO: shouldn't be passing all keys to all files
# TODO: should be looking up the key names from the secrets file
	keys=(
		#AdminSettings.php
		'$wgDBadminpassword'
		'$wgDBadminuser'
		#Local Settings.php
		'$wgDBserver'
		'$wgDBname' 
		'$wgDBuser' 
		'$wgDBpassword' 
		'$wgDBprefix'  
        '$wgImageMagickConvertCommand' 
		#Class.database.php
		'$this->dbhost'
		'$this->dbport'
		'$this->dbusername'
		'$this->dbpassword'
		'$this->dbname'
		#wp-config.php
		'DB_NAME'
		'DB_USER'
		'DB_PASSWORD'
		'DB_HOST'
	)
}

# sets the files to change vars in, reads secrets file for values,
#		and loops thorugh them using the above functions to replace text
function replaceConfigInFiles { 
	filesToReplace=(
	"../includes/class.database.php"
	"../wiki/AdminSettings.php"
	"../wiki/LocalSettings.php"
	"../blog/wp-config.php"
	)
	
	# TODO: this was split out to do this differently later
	getConfigKeysToChange
	
	# double for loop to apply - lets just search+replace all terms in all files
	for outputFile in "${filesToReplace[@]}"; do
		for key in "${keys[@]}"; do
			valueToWrite=$(getAPHPConfigValue "$secretsFile" "$key")
			replacePHPConfig "$key" "$valueToWrite" "$outputFile"
		done
	done
}

# intended as the public function - start here....
function replacePHPConfigSecrets {
if [[ "$1" == "live" ]]; then
	secretsFile="${pathToSecrets}/live.php" 
	replaceConfigInFiles
	fi

if [[ "$1" == "local" ]]; then
	secretsFile="${pathToSecrets}/local.php" 
	replaceConfigInFiles
	fi

if [[ "$1" == "blank" ]]; then
	secretsFile="${pathToSecrets}/blank.php" 
	# don't let any value be nothing. Empty string or zero.
	replaceConfigInFiles
	fi
}
