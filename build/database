#!/bin/bash

# this appeared to be the best non-screen/tmux/expect solution
# http://stackoverflow.com/questions/7114990/pseudo-terminal-will-not-be-allocated-because-stdin-is-not-a-terminal
# but you really want to pay attention to the answer here http://stackoverflow.com/a/21761956/3536094 - in particular nowdocs and the need to single quote 'EOT' to turn a heredoc into a nowdoc

# NOTE: Dupes of env var names - need to copy in environment varibles to the ssh session
# http://stackoverflow.com/questions/4409951/can-i-forward-env-variables-over-ssh

#login via ssh then export an sql to workingFolder

# take a safety copy of the servers db before we wipe it
# i got the tables to exclude by saving a diff result and opening it linewise
DumpTheDB="$SSHEnvVars $( cat <<'EOT'
stty -echo
	echo "directory changed to:"; pwd
	echo "let's first look at the state of the database, dumping new compare copy"
	mysqldump --skip-comments --skip-extended-insert -h mysql-q -u "$dbuser" -p"$remotePass" --opt "$db" --password="$remotePass" --ignore-table=$db.qpwobjectcache --ignore-table=$db.qpwpage --ignore-table=$db.qpwsite_stats --ignore-table=$db.wp_options  > "$db"COMPARE_BEFORE_THIS_UPDATE.sql && echo "dumped the compare version of the new db"
	numDBChanges=$(diff "$db"COMPARE_AFTER_LAST_UPDATE.sql "$db"COMPARE_BEFORE_THIS_UPDATE.sql | wc -l)
echo "number of changes is $numDBChanges"
	if (($numDBChanges != 0)); then
		echo "There have been changes on the server since the last push, take a look at this:"
		diff "$db"COMPARE_AFTER_LAST_UPDATE.sql "$db"COMPARE_BEFORE_THIS_UPDATE.sql
		chooser() {
			echo "Do you want to stop? [y/n]"
			read cf
			cf=$(echo $cf | tr "[:upper:]" "[:lower:"])
			if [[ "$cf" == "y" ]]; then
				echo "exiting - you may need to blankem"
				exit
			fi
			if [[ "$cf" == "n" ]]; then
				echo "continuing"
			fi
			if [[ "$cf" != [yn] ]]; then
				echo "Please respond with a [y/n]: "
				chooser
			fi
		}
		chooser
	fi	
	echo "dumping the LIVE database to "$db"OLD.sql"
	mysqldump -h mysql-q -u "$dbuser" -p"$remotePass" --opt "$db" --password="$remotePass" > "$db"OLD.sql && echo "database dumped onto remote server, let's transfer the DBs across..."
	stty echo
EOT
)"
./exp ssh $sflogin "$DumpTheDB"

# copy that safety copy to my machine's db archive folder, namimg it by date
echo "backing up the current LIVE database backup "$db"OLD.sql to $sqlArchiveFile"
#see here https://sourceforge.net/p/forge/documentation/File%20Management/#access-paths
rsync -P $sflogin:/home/project-web/quickplay/"$db"OLD.sql "$sqlArchiveFile".sql 

#TODO: http://stackoverflow.com/questions/12845206/check-if-file-exists-on-remote-host-with-ssh/

#Upload new sql
# note (if I haven't changed it), that the heredoc can remain as one rather than a nowdoc as we have no brackets in this section
echo "Transferring your local db to the server"
rsync -P "$sqlLiveFile" $sflogin:/home/project-web/quickplay/"$db".sql

replaceDB="$SSHEnvVars $( cat <<EOT
	echo "drop the old db, make a new one, and populate it with the sql"
	stty -echo
	mysql -h mysql-q -u "$dbuser" -p"$remotePass" -e "DROP DATABASE "$db";"
	mysql -h mysql-q -u "$dbuser" -p"$remotePass" -e "CREATE DATABASE "$db";"
	mysql -h mysql-q -u "$dbuser" -p"$remotePass"  "$db" < "$db".sql;
	stty echo
	echo "take an sql for later comparison next time we push"
	stty -echo
	mysqldump --skip-comments --skip-extended-insert -h mysql-q -u "$dbuser" -p"$remotePass" --opt "$db" --password="$remotePass" --ignore-table=$db.qpwobjectcache --ignore-table=$db.qpwpage --ignore-table=$db.qpwsite_stats --ignore-table=$db.wp_options  > "$db"COMPARE_AFTER_LAST_UPDATE.sql && echo "dumped the compare version of the new db"
	stty echo
	echo done
EOT
)"
./exp ssh $sflogin "$replaceDB"

echo "done"
ssh $sflogin shutdown


