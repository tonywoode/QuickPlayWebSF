#!/bin/bash

# this appeared to be the best non-screen/tmux/expect solution
# http://stackoverflow.com/questions/7114990/pseudo-terminal-will-not-be-allocated-because-stdin-is-not-a-terminal

ssh $sflogin create
# NOTE: Dupes of env var names - need to copy in environment varibles to the ssh session
# http://stackoverflow.com/questions/4409951/can-i-forward-env-variables-over-ssh

#login via ssh, show the db's, then export an sql to workingFolder
#ssh -t $sflogin "$SSHEnvVars"; $( cat <<'EOT'
echo "I need the Remote database password please:"
read -s secret

DumpTheDB="$SSHEnvVars $( cat <<EOT
	echo "user is $USER"
	cd $workingDir
	echo "directory changed to"; pwd
	echo "Enter Remote database password:"
	
	echo "Showing databases"
	mysql -h mysql-q -u "$dbuser" -p$secret -e 'show databases;'
	echo "dumping the LIVE database to "$db"OLD.sql"
	mysqldump -h mysql-q -u "$dbuser" -p$secret --opt "$db" --password=$secret > "$db"OLD.sql
EOT
)"
./exp ssh $sflogin "$DumpTheDB"

# copy the old databse off
echo "backing up the current LIVE database backup "$db"OLD.sql to $sqlArchiveFile"

#see here https://sourceforge.net/p/forge/documentation/File%20Management/#access-paths
rsync -P $sflogin:/home/project-web/quickplay/"$db"OLD.sql "$sqlArchiveFile".sql 

#TODO: http://stackoverflow.com/questions/12845206/check-if-file-exists-on-remote-host-with-ssh/
#Upload new sql

echo "Transferring your local db to the server"
rsync -P "$sqlLiveFile" $sflogin:/home/project-web/quickplay/"$db".sql

Dump2="$SSHEnvVars $( cat <<EOT
	cd $workingDir
	#drop the old database
	mysql -h mysql-q -u "$dbuser" -p$secret -e "DROP DATABASE "$db";"
	#make a new database
	mysql -h mysql-q -u "$dbuser" -p$secret -e "CREATE DATABASE "$db";"
	# populate the new database with the file - note lack of 'e' ""
	mysql -h mysql-q -u "$dbuser" -p$secret "$db" < "$db".sql;
EOT
)"
./exp ssh $sflogin "$Dump2"

echo "done"
ssh $sflogin shutdown


